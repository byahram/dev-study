'''
2025.05.08 목
'''

print()
print()
print("--------------------------")
print("--- 자료구조 - 삽입 정렬")
print("--------------------------")
print()

'''
[자료구조 - 삽입 정렬]

- 리스트의 두 번째 원소부터 시작하여, 그 값을 앞쪽의 정렬된 구간에 알맞은 위치에 삽입하면서 정렬하는 방식이다.

[삽입 정렬 동작 방식]

1. 두번째 원소 (i = 1)부터 싲가한다.
2. 현재 값(key)을 저장
3. 정렬된 구간(왼쪽)을 오른쪽으로 밀면서, key보다 큰 값들은 한 칸씩 뒤로 밀어낸다.
4. 밀다가 비교 대상이 없거나 더 작은 값을 만나면, 그 위치(j+1)에 key를 삽입힌다.
5. 이 과정을 리스트 끝까지 반복한다.
'''

# 삽입 정렬
def insertion_sort(arr) :
    for i in range(1, len(arr)) :       # 두 번째 원소부터 끝까지 반복(앞에 건 이미 정렬됐다고 생각)
        # 현재 삽입할 값을 key에 저장
        key = arr[i]

        # key보다 앞에 있는 인덱스를 j로 설정(정렬된 구간의 끝)
        j = i - 1

        while j >= 0 and arr[j] > key :     # j가 0 이상이고, 정렬된 구간의 값이 key보다 크면
            arr[j+1] = arr[j]       # 큰 값을 오른쪽으로 한 칸 밀기
            j = j - 1        # 왼쪽으로 한 칸 이동하면서 비교 계속

        arr[j+1] = key      # 알맞은 자리에 key 삽입(비교가 멈춘 바로 다음 칸)
    
    return arr

print("삽입 정렬 결과 :", insertion_sort([5, 3, 8, 4, 2]))

'''
[삽입 정렬]

i = 1
    key = arr[1] = 3

    j = 0
    while  j >= 0 and arr[j] > key :
        arr[1] = arr[0]     arr[1] = 5      [3, 5, 8, 4, 2]
        j = -1
    [3, 5, 8, 4, 2]

i = 2
    key = arr[2] = 8

    j = 1 
    while j >= 0 and arr[j] > key :     5 > 8   거짓
        arr[2] = 8      # 그대로 유지
    [3, 5, 8, 4, 2]

i = 3
    key = arr[3] = 4

    j = 2 
    while j >= 0 and arr[j] > key :     8 > 4  -> 참
        arr[3] = arr[2]  # 8 밀기 
        j = 1

    j = 1
    while 1 >= 0 and arr[1] > 4 :       5 > 4 -> 참참
        arr[2] = arr[1]    # 5 밀기
        j = 0

    j = 0
    while 0 >= 0 and arr[0] > 4 :       3 > 4 거짓 종료
        arr[1] = 4
    arr[3, 4, 5, 8, 2]

i = 4
    key = arr[4] = 2

    j = 3
    while 3 >= 0 and arr[3] > 2:        8 > 2 참
        arr[4] = arr[3]     => [3,4,5,8,8 ]
        j = 2

    j = 2
    while 2 >= 0 and arr[2] > 2: 
        arr[3] = arr[2]  => [3,4,5,5,8]
        j = 1

    j = 1
    while 1 >= 0 and arr[1] > 3:        4 > 2 참
        arr[2] = arr[1]  => [3,4,4,5,8]
        j = 0

    j = 0
    while 0 >= 0 and arr[0] > 2:        3 > 2 참
        arr[1] = arr[0]  => [3,3,4,5,8]
        j= -1

    arr[0] = 2
    
arr = [2,3,4,5,8]
'''

'''
[정리 요약]

버블 정렬 : 느리고 단순하지만 구조가 쉬움
선택 정렬 : 무조건 비교 많음
삽입 정렬 : 거의 정렬된 데이터에 매우 빠름
'''

print()
print()
print("------------------------ 끝")
print()
