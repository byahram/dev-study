"""
2025.04.17 목
"""

'''
[웹 크롤링]

- 웹(web)상에 있는 정보를 자동으로 수집하는 기술
- 전체적으로 긁어 오는 것

[웹 스크래핑]

- 읽어온 웹 페이지에서 내가 원하는 정보만 추출하는 것
- 예시 : 쇼핑몰에서 상품명, 가격, 평점 자동으로 수집
        뉴스 사이트에서 최신 기사 제목, 날짜 수집
        블로그 글 제목, 리뷰, 이미지 모으기

[클라이언트와 서버의 개념]

- 클라이언트(Client) : 요청하는 쪽 (우리가 사용하는 웹 브라우저)
- 서버(Server) : 요청을 받아서 응답하는 쪽 (네이버, 유튜브, 구글)

[http 통신 이해하기]

- HyperText Transfer Protocol(하이퍼텍스트 전송 규약)의 줄임말이다.
- 웹 브라우저와 웹 서버가 서로 데이터를 주고 받는 통신 규칙

[Http vs Https]

             |       Http        |       Https
의미          | 하이퍼텍스 전송 규약 | 보안이 추가된 Https
데이터 암호화  | X                 | O (SSL/TLS로 암호화)
보안성        | 낮음               | 높음(개인정보 로그인에 적합)

[크롤링 툴]
1. 구글 코랩
    - 구글이 제공하는 무료 온라인 파이썬 실행 환경이다.
    - 특징: 구글 드라이브에 자동 저장된다.
         : 설치 필요 없음
         : GPU 무료 제공(딥러닝에 유용)
         : 주피터 노트북 방식 사용
2. 주피터 노트북

[인코딩]

- 사람이 읽을 수 잇는 글자(문자)를 컴퓨터가 이해할 수 있는 숫자(코드)로 바꾸는 것
- UTF-8 : 전 세계 모든 문자 지원! 웹에서 가장 많이 사용된다.

[ctrl + u] 

- 웹페이지의 원래 html 코드를 보여주는 기능이다.
- 즉, 처음에 웹서버에서 받은 그대로를 보여준다.
    -> 요리하기 전 레시피 종이

[F12]

- 웹 페이지를 실시간으로 검사하고 수정할 수 있는 개발자 도구이다.
- HTML, CSS, JS, 네트워크 상태 등 다 볼 수 있다.
- 실시간으로 바뀐 내용을 볼 수 있다.
'''

'''
[requests 라이브러리]

- HTTP 통신을 위한 외부 라이브러리로, 웹 페이지에서 데이터를 요청하거나 응답을 받을 때 사용된다.
- rq는 별칭이다(alias)
'''
import requests as rq

url = "https://www.naver.com/"

'''
[get 요청]

- http통신에서 서버에 정보를 요청할 때 사용하는 요청 방식이다.
- 클라이언트는 get요청을 통해 특정 리소스(URL)을 요청하고, 서버는 해당 리소스의 내용을 응답으로 반환한다.

[post 요청]

- http 통신에서 서버에 데이터를 제출하거나 전송할 때 사용하는 요청 방식이다.
- 주로 로그인 정보 제출, 회원가입, 글쓰기, 파일 업로드 등의 작업에서 사용된다.

[get vs post]

              GET                           POST
구분          데이터 요청                   데이터 제출
보안성        낮음(url 노출됨)              높음(url이 안보이기 때문)
사용 예시     검색, 페이지보기              로그인, 폼 제출, 댓글 작성
'''
rq.get(url)
rq.post(url)

'''
[상태코드:status_code]
- http 통신에서 서버는 요청을 처리한 결과를 숫자 코드로 응답해준다.

<Response [200]>
: 웹사이트에 요청을 보냈을 때, 서버가 요청을 잘 받았고, 정상적으로 처리했음을 알리는 숫자

<Response [404]>
: Not Found) 요청한 페이지가 없다.

- 200 : 요청이 성공적으로 처리 됨
- 403 : 접근 권한 없음
- 500 : 서버  오류 발생
'''

url = "https://www.naver.com/a"
res = rq.get(url)
print(res.status_code)      # 응답 코드 가져오기

'''
[requests.get()]

- requests.get() 함수는 GET 요청을 보내고, 그 응답 결과를 res라는 변수에 저장한다.
- naver 서버에 요청을 보내고 서버가 보내준 응답을 res에 담는 것
'''
url = "https://www.naver.com/"
res = rq.get(url)
print(res.status_code)

'''
[헤더 가져오기]

- http 요청이나 응답에 포함되는 메타데이터(부가정보)로, 클라이언트(우리)와 서버(네이버)가 서로 어떻게 통신할 지 알려주는 설명서 같은 역할이다.

- Content-Type : 서버가 보내는 데이터의 종류
- date : 서버가 응답을 보낸 시간
- server : 서버의 이름이나 종류
- set-Cookie : 클라이언트에게 저장하라고 명령하는 쿠키
'''
print(res)
print(res.headers)

'''
[html 코드 보기]

- requests.get으로 받은 http 응답에서 본문을 문자열로 반환하는 속성이다.
- 서버가 보내준 html문서 전체를 출력하라는 뜻이다.
'''
print(res.text) # 사람이 읽는 데이터다.

'''
[바이너리 형태로 값을 가져오기]

- 컴퓨터가 데이터를 0과 1로 표현한 가장 기본적인 형태를 말한다.
- 이진수 만으로 저장된 파일, 이미지, 영상, 오디오 등은 모두 바이너리 데이터로 구성되어 있다.
'''
print(res.content) # 컴퓨터가 읽는 바이너리 데이터다.

# 인코딩 확인 : UTF-8
res.encoding

'''
[쿼리스트링 데이터 생성]

* 쿼리 스트링이란?
    : url 뒤에 붙는 ?로 부터 시작하는 데이터로, 서버에 추가 정보를 전달할 때 사용되는 문자열이다.

* 쿼리 스트링 데이터 생성이란?
    - URL 뒤에 붙는 ?key=value 형식의 데이터 문자열을 자동으로 만들어내는 것을 말한다.

* params = ... : 쿼리 스트링 생성을 도와주는 requests 기능이다.
'''
res = rq.get(url, params={"key1":"value1", "key2":"value2"})
print(res.url)

print()
print()
print("------------------------ 끝")
print()
