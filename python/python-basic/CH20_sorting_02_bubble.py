'''
2025.05.08 목
'''

print()
print()
print("--------------------------")
print("--- 자료구조 - 버블정렬")
print("--------------------------")
print()

'''
[자료구조 - 버블정렬]

- 버블정렬 : 작은 값이 점점 앞으로, 큰 값이 점점 뒤로 '거품처럼 밀려가는 모습'에서 이름이 유래되었다.
- [1, 4, 3, 2, 5] -> [1, 2, 3, 4, 5]

[정의]

- 정렬 알고리즘 중 하나로, 이웃한 두 우너소를 비교하여 큰 값을 뒤로 보내는 방식이다.

[동작 원리]

- 왼쪽부터 오른쪽으로 인접한 두 값을 비교 
    -> 앞의 값이 크면 두 값을 서로 교환 
    -> 한 바퀴 돌면 가장 큰 값이 맨 뒤로 이동 
    -> 이 과정을 전체 길이 -1번 반복하게 된다.

** 교육용에서 자주 사용되지만, 실제로는 성능이 떨어져서 대규모 데이터에는 부적합하다.
'''

# 버블정렬 ex
def bubble_sort(arr) :
    n = len(arr)

    for i in range(n) :     # 전체 리스트를 n번 반복(회전 수)
        # print(f"{i+1}회전 시작 : {arr}")
        for j in range(n - i - 1) :     # 한 회전마다 맨 끝 정렬 완료 요소는 제외하고 반복한다.
            if(arr[j] > arr[j+1]) :     # 앞에 있는 값이 뒤에 있는 값보다 크면
                # 두 값의 위치를 교환 (작은 값을 앞으로 보낸다.)
                arr[j], arr[j+1] = arr[j+1], arr[j]
        # print(f"{i+1}회전 끝 : {arr}")
    return arr      # 정렬된 리스트 반환

print("버블정렬 :", bubble_sort([5, 3, 8, 4, 2]))

'''
[버블 정렬]

i = 0일때       
j = 0       [3, 5, 8, 4, 2]
j = 1       5 < 8 이므로 그대로
j = 2       8 > 4 이므로 [3, 5, 4, 8, 2]
j = 3       8 > 2 이므로 [3, 5, 4, 2, 8]

i = 1 일때
j = 0       3 < 5 그대로
j = 1       5 > 4 이므로 [3, 4, 5, 2, 8]
j = 2       5 > 2 이므로 [3, 4, 2, 5, 8]

i = 2일때
j = 0       그대로
j = 1       4 > 2 이므로 [3, 2, 4, 5, 8]

i = 3일때
j = 0       3 > 2 이므로 [2, 3, 4, 5, 8]

i = 4  -> 이미 정렬되어 있으므로 비교 없음
'''

print()
print()
print("------------------------ 끝")
print()